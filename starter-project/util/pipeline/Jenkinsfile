#!groovy
pipeline {
    agent { node { label 'linux && jdk' } }

    environment {

        PROJECT_GROUP = "ap-starter-model"
        PROJECT_NAME = "ap-starter-model"
        SLACK_CHANNEL = "ap-chimera-ci"

        JENKINS_BUILD = "true"

        DOCKER_REVISION = "${env.GIT_COMMIT[0..7]}"
        DOCKER_BUILDKIT = 1

        AZURE_TENANT_ID = credentials('azureTenantId')
        AZURE_APP_ID = credentials('azureAppId')
        AZURE_APP_PASS = credentials('azureAppPass')

        SONAR_TOKEN = credentials('sonar_token')
        SONAR_URL = credentials('sonar_url')

        DOCKER_REPOSITORY = credentials('DOCKER_REPOSITORY')
        DOCKER_USER_LOGIN = credentials('DOCKER_USER_LOGIN')
        DOCKER_USER_PASS = credentials('DOCKER_USER_PASS')

        KUBECONFIG_DEV = credentials('kubeconfig-apoio-dev')
        KUBECONFIG_HML = credentials('kubeconfig-apoio-hml')
        KUBECONFIG_PRD = credentials('kubeconfig_apoio_prd')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Init') {
            steps {
                slackSend(color: '#BADA55', message: "Starting build ${env.BUILD_URL}", channel: "${env.SLACK_CHANNEL}")
//                 script {
//                    if (env.GIT_BRANCH =~ /release/) {
//                        env.ENVIRONMENT = "hml"
//                        env.KUBECONFIG = "${env.KUBECONFIG_HML}"
//                    } else if (env.GIT_BRANCH == 'master') {
//                        env.ENVIRONMENT = "prd"
//                        env.KUBECONFIG = "${env.KUBECONFIG_PRD}"
//                    }
//                     if (env.ENVIRONMENT != "") {
//                         slackSend(color: '#BADA55', message: "Build ${env.BUILD_URL} started with env: ${env.ENVIRONMENT}", channel: "${env.SLACK_CHANNEL}")
//                     }
//                 }
            }
        }

        stage('CI: Build') {
            steps {
                sh """
                    . /usr/local/sdkman/bin/sdkuse -v .sdkmanrc
                    echo build start...
                    make ci
                """
            }
        }

        stage('Fortify') {
            steps {
                script {
                    load "${WORKSPACE}/util/pipeline/Fortify.groovy"
                }
            }
        }

        stage('CD: K8s Deploy') {
            when { expression { env.ENVIRONMENT } }
            steps {
                sh 'make cd'
            }
        }
    }

    post {
        aborted {
            slackSend(channel: "${env.SLACK_CHANNEL}", color: '#FFFF00', message: "[ABORTED] build: ${env.BUILD_URL} was aborted, to see: ${BUILD_URL} on project: ${PROJECT_NAME}, environment: ${env.ENVIRONMENT}")
        }
        success {
            slackSend(channel: "${env.SLACK_CHANNEL}", color: '#00FF00', message: "[SUCCESS] build: ${env.BUILD_URL} successful, to see: ${BUILD_URL} on project: ${PROJECT_NAME}, environment: ${env.ENVIRONMENT}")
        }
        failure {
            slackSend(channel: "${env.SLACK_CHANNEL}", color: '#FF0000', message: "[FAILURE] build: ${env.BUILD_URL} failed, to see: ${env.BUILD_URL} on project: ${PROJECT_NAME}, environment: ${env.ENVIRONMENT}")
        }
    }
}